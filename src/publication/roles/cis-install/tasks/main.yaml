---

#- name: OC Log in (obtain access token)
#  k8s_auth:
#    username: "{{OCUSER}}"
#    password: "{{OCPASS}}"
#    host: "{{ocUrl[dcname]}}"
#    validate_certs: false

- name: OC Log in (using shell command)
  shell: |
    {{ OC }} login {{ocUrl[dcname]}} -u {{OCUSER}} -p {{OCPASS}} --insecure-skip-tls-verify=true

- name: Create bigip-ctlr service account
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: bigip-ctlr
        namespace: kube-system

- name: Create role binding for bigip-ctrl service account
  k8s:
    state: present
    definition:
      # for use in k8s clusters only
      # for OpenShift, use the OpenShift-specific examples
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: bigip-ctlr-clusterrole
        namespace: kube-system
      rules:
      - apiGroups: ["", "extensions"]
        resources: ["nodes", "services", "endpoints", "namespaces", "ingresses", "pods"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["", "extensions"]
        resources: ["configmaps", "events", "ingresses/status"]
        verbs: ["get", "list", "watch", "update", "create", "patch"]
      - apiGroups: ["", "extensions"]
        resources: ["secrets"]
        resourceNames: ["bigip-login"]
        verbs: ["get", "list", "watch"]
     
- name: Create role binding for bigip-ctrl service account
  k8s:
    state: present
    definition:
      # for use in k8s clusters only
      # for OpenShift, use the OpenShift-specific examples
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: bigip-ctlr-clusterrole-binding
        namespace: kube-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: bigip-ctlr-clusterrole
      subjects:
      - apiGroup: ""
        kind: ServiceAccount
        name: bigip-ctlr
        namespace: kube-system

- name: Prepare Deployment template for Container Ingress Services (CIS) container
  delegate_to: localhost
  shell: |
    cp files.input/f5-k8s-bigip-ctlr.{{sdnType[dcname]}}.yaml files.output
  args:
    warn: no

- name: Set parameters for the Deployment declaration
  delegate_to: localhost
  replace:
    path: "files.output/f5-k8s-bigip-ctlr.{{sdnType[as3DC]}}.yaml"
    regexp: "{{ item.expr }}"
    replace: "{{ item.replace }}"
  with_items:
      - { expr: '%%BIGIPUSER%%', replace: "{{BIGIPUSER}}" }
      - { expr: '%%BIGIPPASS%%', replace: "{{BIGIPPASS}}" }
      - { expr: '%%AS3ENDPOINT%%', replace: "{{as3endpoint[as3DC]}}" }

- name: Deploy Container Ingress Services (CIS) container
  k8s:
    state: present
    definition: "{{ lookup('file', 'files.output/f5-k8s-bigip-ctlr.' + sdnType[dcname] + '.yaml') }}"

